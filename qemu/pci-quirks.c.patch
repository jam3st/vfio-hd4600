diff --git a/hw/vfio/pci-quirks.c b/hw/vfio/pci-quirks.c
index 136f3a9..fc8f42c 100644
--- a/hw/vfio/pci-quirks.c
+++ b/hw/vfio/pci-quirks.c
@@ -1262,11 +1262,17 @@ int vfio_pci_igd_opregion_init(VFIOPCIDevice *vdev,
                                struct vfio_region_info *info, Error **errp)
 {
     int ret;
+    hwaddr offsetMask = (1u << 12u) - 1u;
+    hwaddr offsetOffset = 0x0u;
+    hwaddr opregPos = 0xee000u;
 
+    offsetOffset = pci_get_long(vdev->pdev.config + IGD_ASLS) & offsetMask;
+    fprintf(stderr,"address is %08x\n", offsetOffset);
     vdev->igd_opregion = g_malloc0(info->size);
     ret = pread(vdev->vbasedev.fd, vdev->igd_opregion,
-                info->size, info->offset);
-    if (ret != info->size) {
+                info->size, info->offset + offsetOffset);
+
+    if (ret <= 0) {
         error_setg(errp, "failed to read IGD OpRegion");
         g_free(vdev->igd_opregion);
         vdev->igd_opregion = NULL;
@@ -1289,9 +1295,25 @@ int vfio_pci_igd_opregion_init(VFIOPCIDevice *vdev,
     fw_cfg_add_file(fw_cfg_find(), "etc/igd-opregion",
                     vdev->igd_opregion, info->size);
 
+    MemoryRegion *system_memory = get_system_memory();
+    MemoryRegion *opr = g_new(MemoryRegion, 1);
+    void *p = NULL;
+    char buf[16];
+    //memory_region_init_io(opr, OBJECT(vdev), &vfio_opregion_ops, vdev, "opr", 8192);
+    p = mmap(NULL, 8192, PROT_WRITE | PROT_READ, MAP_SHARED, vdev->vbasedev.fd, info->offset);
+    memcpy(buf, p + offsetOffset, 16);
+    buf[15] = '\0';
+    fprintf(stderr, "MMAP %d returned for offset %llx ret %p %s\n", vdev->vbasedev.fd, info->offset, p, buf);
+    memory_region_init_ram_ptr(opr, OBJECT(vdev),"opr", 8192, p);
+
+    memory_region_add_subregion_overlap(system_memory,
+                                        opregPos,
+                                        opr,
+                                        1);
+    pci_set_long(vdev->pdev.config + IGD_ASLS, opregPos + offsetOffset);
     trace_vfio_pci_igd_opregion_enabled(vdev->vbasedev.name);
 
-    pci_set_long(vdev->pdev.config + IGD_ASLS, 0);
+//    pci_set_long(vdev->pdev.config + IGD_ASLS, 0);
     pci_set_long(vdev->pdev.wmask + IGD_ASLS, ~0);
     pci_set_long(vdev->emulated_config_bits + IGD_ASLS, ~0);
 
